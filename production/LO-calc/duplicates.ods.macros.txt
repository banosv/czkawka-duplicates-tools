' ============================================================================
' CZKAWKA DUPLICATE FILE ANALYSIS - LIBREOFFICE CALC MACRO MODULE v0.5
' ============================================================================
' 
' DESCRIPTION:
' This module provides file manager integration and decision marking for 
' Czkawka duplicate analysis CSV data. Optimized with centralized decision 
' handling and named range integration.
'
' NAMED RANGE STRUCTURE (MUST EXIST IN SHEET):
' Named Range "fullData": $duplicates.$A$2:$K$100000
' - Columns: A=Checkboxes, B=OrigPath, C=OrigFile, D=DupPath, E=DupFile,
'   F=Size, G=Hash, H=Keep_Original, I=Keep_Duplicate, J=Action, K=Notes
' - Rows: 1=Subtotals (protected), 2=Headers (protected), 3+=Data rows
'
' FEATURES:
' - Dual-pane file manager integration (Krusader, Nemo)
' - Smart fallback system with external script support
' - Centralized decision marking with color coding
' - Automatic cursor advancement for efficient workflow
' - Decision statistics and filtering functions
' - Protected rows: Row 1 (subtotals) and Row 2 (headers)
'
' SETUP:
' 1. Enable macros: Tools → Options → Security → Macro Security (Medium)
' 2. Create named range "fullData": $duplicates.$A$2:$K$100000
' 3. Assign keyboard shortcuts: Tools → Customize → Keyboard
'    F3: OpenInNemoFromActiveCell, Alt+F3: OpenInKrusaderFromActiveCell
'    Ctrl+3: MarkKeepOriginal, Ctrl+4: MarkKeepDuplicate, Ctrl+6: MarkNeedsReview
'    Alt+3: MarkSoftLinkDuplicate, Alt+4: MarkSoftLinkOriginal 
'    Ctrl+Alt+3: MarkHardLinkDuplicate, Ctrl+Alt+4: MarkHardLinkOriginal
'    Ctrl+7: ShowStatistics, Ctrl+8: ClearDecisions
'    Ctrl+9: ToggleFilterByActiveCell, Ctrl+0: ClearFilterState
' 4. Install file managers: sudo apt install nemo krusader
'
' Author: banos - with AI support from claude.ai and deepSeek
' Date: August 15, 2025
' Version: 0.5
' ============================================================================

' CONSTANTS FOR NAMED RANGE COLUMN MAPPING
' ============================================================================
Private Const COL_CHECKBOXES As Integer = 0      ' Column A
Private Const COL_ORIG_PATH As Integer = 1       ' Column B
Private Const COL_ORIG_FILE As Integer = 2       ' Column C
Private Const COL_DUP_PATH As Integer = 3        ' Column D
Private Const COL_DUP_FILE As Integer = 4        ' Column E
Private Const COL_SIZE As Integer = 5            ' Column F
Private Const COL_HASH As Integer = 6            ' Column G
Private Const COL_KEEP_ORIGINAL As Integer = 7   ' Column H
Private Const COL_KEEP_DUPLICATE As Integer = 8  ' Column I
Private Const COL_ACTION As Integer = 9          ' Column J
Private Const COL_NOTES As Integer = 10          ' Column K

Private Const PROTECTED_ROWS As Integer = 2      ' Rows 1-2 are protected

' VALIDATION AND DATA EXTRACTION FUNCTION
' ============================================================================

Function ValidateAndGetFileData() As Variant
    ' Validates current cell position and extracts file data for file manager operations
    ' Returns: Array with file data [leftPath, leftFile, rightPath, rightFile] or Empty on failure
    ' Uses named range structure for column mapping
    
    Dim currentRow As Long
    Dim leftPath As String, leftFile As String
    Dim rightPath As String, rightFile As String
    Dim sheet As Object
    Dim dataRange As Object
    Dim fileData(3) As String
    
    ' Get the active sheet and named range
    sheet = ThisComponent.getCurrentController().getActiveSheet()
    dataRange = sheet.getCellRangeByName("fullData")
    currentRow = ThisComponent.getCurrentController().getSelection().getRangeAddress().StartRow + 1
    
    ' Check if we're on protected rows
    If currentRow <= PROTECTED_ROWS Then
        MsgBox("Cannot open files from protected rows." & Chr(10) & Chr(10) & _
               "Row 1: Reserved for subtotals" & Chr(10) & _
               "Row 2: Reserved for headers" & Chr(10) & Chr(10) & _
               "Please select a data row (row 3 or below) to open files.", 48, "Czkawka Tools - Protected Rows")
        ValidateAndGetFileData = Empty
        Exit Function
    End If
    
    ' Get file data using column constants
    leftPath = sheet.getCellByPosition(COL_ORIG_PATH, currentRow - 1).getString()
    leftFile = sheet.getCellByPosition(COL_ORIG_FILE, currentRow - 1).getString()
    rightPath = sheet.getCellByPosition(COL_DUP_PATH, currentRow - 1).getString()
    rightFile = sheet.getCellByPosition(COL_DUP_FILE, currentRow - 1).getString()
    
    ' Validate complete data
    If leftPath = "" Or leftFile = "" Or rightPath = "" Or rightFile = "" Then
        MsgBox("Missing path or filename data in row " & currentRow & Chr(10) & Chr(10) & _
               "Required columns:" & Chr(10) & _
               "B: Original folder path" & Chr(10) & _ 
               "C: Original filename" & Chr(10) & _
               "D: Duplicate folder path" & Chr(10) & _
               "E: Duplicate filename", 48, "Czkawka Tools - Data Error")
        ValidateAndGetFileData = Empty
        Exit Function
    End If
    
    ' Return validated file data
    fileData(0) = leftPath
    fileData(1) = leftFile
    fileData(2) = rightPath
    fileData(3) = rightFile
    
    ValidateAndGetFileData = fileData
End Function

' MAIN FILE MANAGER INTEGRATION FUNCTIONS
' ============================================================================

Sub OpenInNemoFromActiveCell()
    ' Opens both original and duplicate file locations with Nemo preference
    ' Fallback order: Nemo → Krusader → System default
    
    Dim fileData As Variant
    Dim leftPath As String, leftFile As String, rightPath As String, rightFile As String
    
    fileData = ValidateAndGetFileData()
    If IsEmpty(fileData) Then Exit Sub
    
    leftPath = fileData(0): leftFile = fileData(1)
    rightPath = fileData(2): rightFile = fileData(3)
    
    If LaunchNemo(leftPath, rightPath, leftFile, rightFile) Then Exit Sub
    If LaunchKrusader(leftPath, rightPath, leftFile, rightFile) Then Exit Sub
    LaunchSeparateWindows(leftPath, rightPath, leftFile, rightFile)
End Sub

Sub OpenInKrusaderFromActiveCell()
    ' Opens both original and duplicate file locations with Krusader preference
    ' Fallback order: Krusader → Nemo → System default
    
    Dim fileData As Variant
    Dim leftPath As String, leftFile As String, rightPath As String, rightFile As String
    
    fileData = ValidateAndGetFileData()
    If IsEmpty(fileData) Then Exit Sub
    
    leftPath = fileData(0): leftFile = fileData(1)
    rightPath = fileData(2): rightFile = fileData(3)
    
    If LaunchKrusader(leftPath, rightPath, leftFile, rightFile) Then Exit Sub
    If LaunchNemo(leftPath, rightPath, leftFile, rightFile) Then Exit Sub
    LaunchSeparateWindows(leftPath, rightPath, leftFile, rightFile)
End Sub

' FILE MANAGER LAUNCH FUNCTIONS
' ============================================================================

Function LaunchKrusader(leftPath As String, rightPath As String, leftFile As String, rightFile As String) As Boolean
    ' Enhanced Krusader launcher with multiple fallback strategies
    ' Configure scriptPath variable below to match your installation
    
    On Error GoTo KrusaderError
    Dim command As String
    Dim scriptPath As String
    
    scriptPath = "~/opt/czkawka-cli/production/scripts/launch_krusader.sh"
    
    ' Try external script first (best file selection)
    On Error GoTo TryDirectCommand
    command = scriptPath & " """ & leftPath & """ """ & rightPath & """"
    Shell(command, 1)
    LaunchKrusader = True
    Exit Function
    
TryDirectCommand:
    ' Try direct command with profile parameter
    On Error GoTo TryBasicCommand
    command = "krusader --profile=panel --left=""" & leftPath & """ --right=""" & rightPath & """"
    Shell(command, 1)
    LaunchKrusader = True
    Exit Function
    
TryBasicCommand:
    ' Basic Krusader command (final fallback)
    On Error GoTo KrusaderError
    command = "krusader --left=""" & leftPath & """ --right=""" & rightPath & """"
    Shell(command, 1)
    LaunchKrusader = True
    Exit Function
    
KrusaderError:
    LaunchKrusader = False
End Function

Function LaunchNemo(leftPath As String, rightPath As String, leftFile As String, rightFile As String) As Boolean
    ' Launches Nemo with both locations in tabs and files selected
    
    On Error GoTo NemoError
    Dim command As String
    
    command = "nemo -t """ & leftPath & "/" & leftFile & """ """ & rightPath & "/" & rightFile & """"
    Shell(command, 1)
    LaunchNemo = True
    Exit Function
    
NemoError:
    LaunchNemo = False
End Function

Sub LaunchSeparateWindows(leftPath As String, rightPath As String, leftFile As String, rightFile As String)
    ' Final fallback: opens both locations in separate windows
    
    Dim leftCommand As String, rightCommand As String
    Dim leftFullPath As String, rightFullPath As String
    
    leftFullPath = leftPath & "/" & leftFile
    rightFullPath = rightPath & "/" & rightFile
    
    On Error GoTo FallbackToFolders
    
    leftCommand = "nemo """ & leftFullPath & """"
    rightCommand = "nemo """ & rightFullPath & """"
    
    Shell(leftCommand, 1)
    Wait(1000)
    Shell(rightCommand, 1)
    
    MsgBox("Opened both files in separate windows:" & Chr(10) & _
           "Original: " & leftFullPath & Chr(10) & _
           "Duplicate: " & rightFullPath, 64, "Files Opened for Comparison")
    Exit Sub
    
FallbackToFolders:
    Shell("xdg-open """ & leftPath & """", 1)
    Wait(1500)
    Shell("xdg-open """ & rightPath & """", 1)
    
    MsgBox("Opened both folders in separate windows:" & Chr(10) & _
           "Original folder: " & leftPath & Chr(10) & _
           "Duplicate folder: " & rightPath, 64, "Folders Opened")
End Sub

' CENTRALIZED DECISION MARKING FUNCTION
' ============================================================================

Sub MarkDecision(keepOriginal As String, keepDuplicate As String, action As String, colorOrig As Long, colorDup As Long)
    ' Centralized decision marking function used by all decision wrapper functions
    ' Handles validation, cell updates, color coding, and cursor advancement
    
    Dim sheet As Object
    Dim currentRow As Long
    Dim cellKeepOrig As Object, cellKeepDup As Object
    
    sheet = ThisComponent.getCurrentController().getActiveSheet()
    currentRow = ThisComponent.getCurrentController().getSelection().getRangeAddress().StartRow
    
    ' Check for protected rows
    If currentRow <= (PROTECTED_ROWS - 1) Then
        MsgBox("Cannot mark decisions on protected rows." & Chr(10) & Chr(10) & _
               "Row 1: Reserved for subtotals" & Chr(10) & _
               "Row 2: Reserved for headers" & Chr(10) & Chr(10) & _
               "Please select a data row (row 3 or below) to mark decisions.", 48, "Czkawka Tools - Protected Rows")
        Exit Sub
    End If
    
    ' Set decision values using column constants
    sheet.getCellByPosition(COL_KEEP_ORIGINAL, currentRow).setString(keepOriginal)
    sheet.getCellByPosition(COL_KEEP_DUPLICATE, currentRow).setString(keepDuplicate)
    sheet.getCellByPosition(COL_ACTION, currentRow).setString(action)
    
    ' Apply color coding
    cellKeepOrig = sheet.getCellByPosition(COL_KEEP_ORIGINAL, currentRow)
    cellKeepDup = sheet.getCellByPosition(COL_KEEP_DUPLICATE, currentRow)
    
    cellKeepOrig.setPropertyValue("CellBackColor", colorOrig)
    cellKeepDup.setPropertyValue("CellBackColor", colorDup)
    
    ' Move to next row for efficient workflow
    MoveToNextRow()
End Sub

' DECISION WRAPPER FUNCTIONS (KEYBOARD SHORTCUT TARGETS)
' ============================================================================

Sub MarkKeepOriginal()
    ' SHORTCUT: Ctrl+3 - Keep original file, delete duplicate
    MarkDecision("YES", "NO", "DELETE_DUPLICATE", RGB(144, 238, 144), RGB(255, 182, 193))
End Sub

Sub MarkKeepDuplicate()
    ' SHORTCUT: Ctrl+4 - Keep duplicate file, delete original
    MarkDecision("NO", "YES", "DELETE_ORIGINAL", RGB(255, 182, 193), RGB(144, 238, 144))
End Sub

Sub MarkDeleteBoth()
    ' Delete both files (use with caution)
    MarkDecision("NO", "NO", "DELETE_BOTH", RGB(255, 182, 193), RGB(255, 182, 193))
End Sub

Sub MarkNeedsReview()
    ' SHORTCUT: Ctrl+6 - Mark for later review
    MarkDecision("REVIEW", "REVIEW", "REVIEW_NEEDED", RGB(255, 255, 180), RGB(255, 255, 180))
End Sub

Sub MarkSoftLinkDuplicate()
    ' SHORTCUT: Alt+3 - Keep original, soft link duplicate to it
    MarkDecision("YES", "LINK", "SOFTLINK_DUPLICATE", RGB(144, 238, 144), RGB(173, 216, 230))
End Sub

Sub MarkSoftLinkOriginal()
    ' SHORTCUT: Alt+4 - Keep duplicate, soft link original to it
    MarkDecision("LINK", "YES", "SOFTLINK_ORIGINAL", RGB(173, 216, 230), RGB(144, 238, 144))
End Sub

Sub MarkHardLinkDuplicate()
    ' SHORTCUT: Ctrl+Alt+3 - Keep original, hard link duplicate to it
    MarkDecision("YES", "LINK", "HARDLINK_DUPLICATE", RGB(144, 238, 144), RGB(176, 224, 230))
End Sub

Sub MarkHardLinkOriginal()
    ' SHORTCUT: Ctrl+Alt+4 - Keep duplicate, hard link original to it
    MarkDecision("LINK", "YES", "HARDLINK_ORIGINAL", RGB(176, 224, 230), RGB(144, 238, 144))
End Sub

' UTILITY AND WORKFLOW FUNCTIONS
' ============================================================================

Sub MoveToNextRow()
    ' Automatically advance cursor to next row after marking decision
    
    Dim oSheet As Object
    Dim oController As Object
    Dim currentRow As Long, targetRow As Long
    
    oController = ThisComponent.getCurrentController()
    oSheet = oController.getActiveSheet()
    currentRow = oController.getSelection().getRangeAddress().StartRow
    
    targetRow = currentRow + 1
    If targetRow <= (PROTECTED_ROWS - 1) Then targetRow = PROTECTED_ROWS
    
    ' Move cursor to original path column (B) of next row
    oController.select(oSheet.getCellByPosition(COL_ORIG_PATH, targetRow))
End Sub

Sub ClearDecisions()
    ' Clears decision markings (columns H, I, J) and color formatting for selected range
    ' Skips protected rows automatically
    
    Dim sheet As Object
    Dim selection As Object
    Dim currentRow As Long, endRow As Long, i As Long
    Dim cellKeepOrig As Object, cellKeepDup As Object
    Dim processedRows As Long
    
    sheet = ThisComponent.getCurrentController().getActiveSheet()
    selection = ThisComponent.getCurrentController().getSelection()
    currentRow = selection.getRangeAddress().StartRow
    endRow = selection.getRangeAddress().EndRow
    processedRows = 0
    
    For i = currentRow To endRow
        If i > (PROTECTED_ROWS - 1) Then
            ' Clear decision columns using constants
            sheet.getCellByPosition(COL_KEEP_ORIGINAL, i).setString("")
            sheet.getCellByPosition(COL_KEEP_DUPLICATE, i).setString("")
            sheet.getCellByPosition(COL_ACTION, i).setString("")
            
            ' Reset colors
            cellKeepOrig = sheet.getCellByPosition(COL_KEEP_ORIGINAL, i)
            cellKeepDup = sheet.getCellByPosition(COL_KEEP_DUPLICATE, i)
            cellKeepOrig.setPropertyValue("CellBackColor", -1)
            cellKeepDup.setPropertyValue("CellBackColor", -1)
            
            processedRows = processedRows + 1
        End If
    Next i
    
    If processedRows > 0 Then
        MsgBox("Cleared decisions for " & processedRows & " data rows", 64, "Decisions Cleared")
    Else
        MsgBox("No data rows selected. Rows 1-2 are protected.", 48, "No Changes Made")
    End If
End Sub

Sub ShowStatistics()
    ' Displays comprehensive statistics of decision markings
    ' Excludes protected rows from calculations
    
    Dim sheet As Object
    Dim dataRange As Object
    Dim lastRow As Long, i As Long
    Dim keepOrig As Long, keepDup As Long, deleteBoth As Long, needReview As Long, unprocessed As Long
    Dim softLinkOrig As Long, softLinkDup As Long, hardLinkOrig As Long, hardLinkDup As Long
    Dim action As String, totalDataRows As Long, processedRows As Long, completionPercent As Long
    
    sheet = ThisComponent.getCurrentController().getActiveSheet()
    dataRange = sheet.getCellRangeByName("fullData")
    
    ' Find last row with data in the named range
    lastRow = PROTECTED_ROWS
    Do While sheet.getCellByPosition(COL_ACTION, lastRow).getString() <> "" Or _
             sheet.getCellByPosition(COL_ORIG_PATH, lastRow).getString() <> ""
        lastRow = lastRow + 1
        If lastRow > dataRange.getRangeAddress().EndRow Then Exit Do
    Loop
    lastRow = lastRow - 1
    
    totalDataRows = lastRow - (PROTECTED_ROWS - 1)
    If totalDataRows < 1 Then totalDataRows = 0
    
    ' Count decisions starting from first data row
    For i = PROTECTED_ROWS To lastRow
        action = sheet.getCellByPosition(COL_ACTION, i).getString()
        Select Case action
            Case "DELETE_DUPLICATE": keepOrig = keepOrig + 1
            Case "DELETE_ORIGINAL": keepDup = keepDup + 1
            Case "DELETE_BOTH": deleteBoth = deleteBoth + 1
            Case "REVIEW_NEEDED": needReview = needReview + 1
            Case "SOFTLINK_DUPLICATE": softLinkOrig = softLinkOrig + 1
            Case "SOFTLINK_ORIGINAL": softLinkDup = softLinkDup + 1
            Case "HARDLINK_DUPLICATE": hardLinkOrig = hardLinkOrig + 1
            Case "HARDLINK_ORIGINAL": hardLinkDup = hardLinkDup + 1
            Case "": unprocessed = unprocessed + 1
        End Select
    Next i
    
    processedRows = keepOrig + keepDup + deleteBoth + needReview + softLinkOrig + softLinkDup + hardLinkOrig + hardLinkDup
    If totalDataRows > 0 Then
        completionPercent = Int((processedRows / totalDataRows) * 100)
    Else
        completionPercent = 0
    End If
    
    MsgBox("CZKAWKA DUPLICATE ANALYSIS STATISTICS" & Chr(10) & _
           "===========================================" & Chr(10) & Chr(10) & _
           "DELETION DECISIONS:" & Chr(10) & _
           "Keep Original: " & keepOrig & ", Keep Duplicate: " & keepDup & Chr(10) & _
           "Delete Both: " & deleteBoth & Chr(10) & Chr(10) & _
           "LINKING DECISIONS:" & Chr(10) & _
           "Soft Links: " & (softLinkOrig + softLinkDup) & Chr(10) & _
           "Hard Links: " & (hardLinkOrig + hardLinkDup) & Chr(10) & Chr(10) & _
           "PROGRESS:" & Chr(10) & _
           "Processed: " & processedRows & " / " & totalDataRows & " (" & completionPercent & "%)" & Chr(10) & _
           "Need Review: " & needReview & ", Unprocessed: " & unprocessed, 64, "Analysis Progress")
End Sub

Sub ToggleFilterByActiveCell()
    ' Filter toggle using fullData named range with exact text matching
    
    Dim oSheet As Object
    Dim oRange As Object
    Dim oActiveCell As Object
    Dim sFilterValue As String
    Dim nColumn As Integer
    Dim oFilterDesc As Object
    Dim oCellA1 As Object
    Dim oActiveCellAddress As Object
    Dim oDataAddress As Object
    
    oSheet = ThisComponent.getCurrentController().getActiveSheet()
    oRange = oSheet.getCellRangeByName("fullData")
    oActiveCell = ThisComponent.getCurrentController().getSelection()
    oCellA1 = oSheet.getCellByPosition(COL_CHECKBOXES, 0)  ' A1 for filter state
    
    If oActiveCell.getImplementationName() <> "ScCellObj" Then Exit Sub
    
    oActiveCellAddress = oActiveCell.getCellAddress()
    oDataAddress = oRange.getRangeAddress()
    
    ' Check if active cell is within fullData range
    If oActiveCellAddress.Sheet <> oDataAddress.Sheet Or _
       oActiveCellAddress.Column < oDataAddress.StartColumn Or _
       oActiveCellAddress.Column > oDataAddress.EndColumn Or _
       oActiveCellAddress.Row < oDataAddress.StartRow Or _
       oActiveCellAddress.Row > oDataAddress.EndRow Then
        Exit Sub
    End If
    
    nColumn = oActiveCellAddress.Column
    sFilterValue = oActiveCell.getString()
    
    If sFilterValue = "" Then Exit Sub
    
    ' Toggle filter based on A1 state
    If oCellA1.getString() <> "" Then
        ' Clear filter
        oFilterDesc = oRange.createFilterDescriptor(True)
        oFilterDesc.setPropertyValue("ContainsHeader", True)
        oFilterDesc.setFilterFields(Array())
        oRange.filter(oFilterDesc)
        oCellA1.setString("")
    Else
        ' Apply filter
        oFilterDesc = oRange.createFilterDescriptor(True)
        oFilterDesc.setPropertyValue("ContainsHeader", True)
        oFilterDesc.setPropertyValue("UseRegularExpressions", False)
        
        Dim oFilterFields(0) As New com.sun.star.sheet.TableFilterField
        oFilterFields(0).Field = nColumn - oDataAddress.StartColumn
        oFilterFields(0).IsNumeric = False
        oFilterFields(0).StringValue = sFilterValue
        oFilterFields(0).Operator = com.sun.star.sheet.FilterOperator.EQUAL
        
        oFilterDesc.setFilterFields(oFilterFields())
        oRange.filter(oFilterDesc)
        oCellA1.setString("FILTERED: " & sFilterValue)
    End If
End Sub

Sub ClearFilterState()
    ' Clear any active filters and state indicator
    
    Dim oSheet As Object
    Dim oRange As Object
    Dim oFilterDesc As Object
    Dim oCellA1 As Object
    
    oSheet = ThisComponent.getCurrentController().getActiveSheet()
    oRange = oSheet.getCellRangeByName("fullData")
    oCellA1 = oSheet.getCellByPosition(COL_CHECKBOXES, 0)
    
    oFilterDesc = oRange.createFilterDescriptor(True)
    oFilterDesc.setPropertyValue("ContainsHeader", True)
    oFilterDesc.setFilterFields(Array())
    oRange.filter(oFilterDesc)
    
    oCellA1.setString("")
    MsgBox("All filters cleared. Showing all data rows.", 64, "Filter Cleared")
End Sub

' UTILITY FUNCTIONS
' ============================================================================

Function RGB(red As Integer, green As Integer, blue As Integer) As Long
    ' Creates RGB color value for LibreOffice cell formatting
    RGB = red + (green * 256) + (blue * 65536)
End Function

' ============================================================================
' KEYBOARD SHORTCUTS SUMMARY:
' F3: OpenInNemoFromActiveCell | Alt+F3: OpenInKrusaderFromActiveCell
' Ctrl+3: MarkKeepOriginal | Ctrl+4: MarkKeepDuplicate | Ctrl+6: MarkNeedsReview
' Alt+3: MarkSoftLinkDuplicate | Alt+4: MarkSoftLinkOriginal
' Ctrl+Alt+3: MarkHardLinkDuplicate | Ctrl+Alt+4: MarkHardLinkOriginal
' Ctrl+7: ShowStatistics | Ctrl+8: ClearDecisions
' Ctrl+9: ToggleFilterByActiveCell | Ctrl+0: ClearFilterState
' ============================================================================
